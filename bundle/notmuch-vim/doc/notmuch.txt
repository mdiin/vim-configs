*notmuch.txt*	Plug-in to make vim a nice email client using notmuch

Author: Felipe Contreras <felipe.contreras@gmail.com>

Overview 					|notmuch-intro|
Usage						|notmuch-usage|
Mappings					|notmuch-mappings|
Configuration					|notmuch-config|

==============================================================================
OVERVIEW					*notmuch-intro*

This is a vim plug-in that provides a fully usable mail client interface,
utilizing the notmuch framework.

It has three main views: folders, search, and thread. In the folder view you
can find a summary of saved searches, In the search view you can see all the
threads that comprise the selected search, and in the thread view you can read
every mail in the thread.

==============================================================================
USAGE						*notmuch-usage*

To use it, simply run the `:NotMuch` command.

By default you start in the folder view which shows you default searches and
the number of threads that match those:
>
	10 new                  (tag:inbox and tag:unread)
	20 inbox                (tag:inbox)
	30 unread               (tag:unread)
<
You can see the threads of each by clicking `enter`, which sends you to the
search view. In both the search and folder views you can type `s` to type a
new search, or `=` to refresh. To see a thread, type `enter` again.

To exit a view, click `q`.

Also, you can specify a search directly:
>
	:NotMuch is:inbox and date:yesterday..
<
==============================================================================
MAPPINGS					*notmuch-mappings*

------------------------------------------------------------------------------
Folder view~

<Enter>	Show selected search
A	Archive (-inbox -unread) an entire folder
s	Enter a new search
=	Refresh
c	Compose a new mail

------------------------------------------------------------------------------
Search view~

q	Quit view
<Enter>	Show selected search
<Space>	Show selected search with filter
A	Archive (-inbox -unread) all search results displayed.
a	Archive (-inbox -unread) thread
I	Mark as read (-unread)
t	Tag (prompted)
s	Search
=	Refresh
?	Show search information
c	Compose a new mail
>
------------------------------------------------------------------------------
Thread view~

q	Quit view
a	Archive (-inbox -unread) the current thread and move to next thread
I	Mark as read (-unread)
t	Tag (prompted)
o	Open message in another email viewer
e       Extract attachment on the current 'Attachment' line or all
	attachments if the cursor is elsewhere.
<Enter> View email part on the current 'Part' line; open URI under cursor
        or on line; expands folded thread.
s	Search
p	Save patches
r	Reply
?	Show thread information
<S-Tab>	Jump to previous message
<Tab>	Jump to next unread message
c	Compose a new mail

------------------------------------------------------------------------------
Compose view~

<Leader>q	Quit view
<Leader>s	Send

==============================================================================
CONFIGURATION					*notmuch-config*

You can add the following configurations to your `.vimrc`, or
`~/.vim/plugin/notmuch.vim`.

						*g:notmuch_folders*

The first thing you might want to do is set your custom searches.

Adding an empty set of strings results in a blank line which allows you
to break up searches into groups.
>
	let g:notmuch_folders = [
		\ [ 'new', 'tag:inbox and tag:unread' ],
		\ [ 'inbox', 'tag:inbox' ],
		\ [ 'unread', 'tag:unread' ],
		\ [ '', '' ],
		\ [ 'to-do', 'tag:to-do' ],
		\ [ 'to-me', 'to:john.doe and tag:new' ],
		\ ]
<

						*g:notmuch_custom_search_maps*
						*g:notmuch_custom_show_maps*

You can also configure the keyboard mappings for the different views:
>
	let g:notmuch_custom_search_maps = {
		\ 't':		'search_tag("+to-do -inbox")',
		\ 'd':		'search_tag("+deleted -inbox -unread")',
		\ }

	let g:notmuch_custom_show_maps = {
		\ 't':		'show_tag("+to-do -inbox")',
		\ 'd':		'show_tag("+deleted -inbox -unread")',
		\ }
<

						*g:notmuch_sendmail_method*
						*g:notmuch_sendmail_param*

This allows you to configure how notmuch-vim will send your emails.  The
default is simply to use the local 'sendmail' program.  However you can
configure a number of different delivery methods.

To use SMTP to a known relay you can use 'smtp' delivery method and then
specify any of the following parameters:

>
	let g:notmuch_sendmail_method = 'smtp'

	let g:notmuch_sendmail_param = {
		\  'address': "smtp.gmail.com",
                \  'port': 587,
                \  'domain': 'your.host.name',
                \  'user_name': '<username>',
                \  'password': '<password>',
                \  'authentication': 'plain',
                \  'enable_starttls_auto': 'true',
		\  }
<
Of course the above are generally all optional except 'address'.

To use Exim, you must specify exim as the delivery method and then configure
the location of the binary:

>
	let g:notmuch_sendmail_method = 'exim'

	let g:notmuch_sendmail_param = {
		\ 'location': '/usr/bin/exim',
		\ }
<
The default sendmail method also accepts the 'location' param.

						*g:notmuch_date_format*

To configure the date format you want in the search view:
>
	let g:notmuch_date_format = '%d.%m.%y'
<

						*g:notmuch_datetime_format*

You can do the same for the thread view:
>
	let g:notmuch_datetime_format = '%d.%m.%y %H:%M:%S'
<

						*g:notmuch_folders_count_threads*

If you want to count the threads instead of the messages in the folder view:
>
	let g:notmuch_folders_count_threads = 0
<

						*g:notmuch_folders_display_unread_count*

You can display the number of unread messages in each folder with:
>
	let g:notmuch_folders_display_unread_count = 1
<
If 'g:notmuch_folders_count_threads' is set, it will display the number of
threads with at least an unread message.

						*g:notmuch_reader*

You can also configure your external mail reader:
>
	let g:notmuch_reader = 'mutt -f %s'
<

You can also configure what probram is used to view attachments:

						*g:notmuch_view_attachment*
>
	let g:notmuch_view_attachment = 'xdg-open'
<
						*g:notmuch_open_uri*
Set the tool used to open a URI:
>
	let g:notmuch_open_uri = 'xdg-open'
<
Show email threads as folded?
						*g:notmuch_show_folded_threads*
>
	let g:notmuch_show_folded_threads = 1
<
Configure whether to display full headers folded in the message:

						*g:notmuch_show_folded_full_headers*
>
	let g:notmuch_show_folded_full_headers = 1
<
If you would prefer to start composing an email in insert mode:

						*g:notmuch_compose_start_insert*
>
	let g:notmuch_compose_start_insert = 0
<
Save email to local notmuch email database?

						*g:notmuch_save_sent_locally*
>
	let g:notmuch_save_sent_locally = 1
<
Configure which folder to save sent email to:

						*g:notmuch_save_sent_mailbox*
>
	let g:notmuch_save_sent_mailbox = 'Sent'
<

Enable gnupg abilities:

						*g:notmuch_gpg_enable*
>
	let g:notmuch_gpg_enable = 0
<
With gpg enabled, the signatures of received mails will be checked and
encrypted mail will be opened if possible. To query keys passphrase, two
methods are available : an input in vim status line (default) or the
gpg-agent pinentry.

						*g:notmuch_gpg_pinentry*
>
	let g:notmuch_gpg_pinentry = 0
<

vim:tw=78:ts=8:noet:ft=help:
